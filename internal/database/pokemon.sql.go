// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pokemon.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const activateUserPokemon = `-- name: ActivateUserPokemon :exec
UPDATE user_pokemon
SET is_active = true
WHERE user_id = $1 AND pokemon_id = $2
`

type ActivateUserPokemonParams struct {
	UserID    uuid.UUID
	PokemonID sql.NullInt32
}

func (q *Queries) ActivateUserPokemon(ctx context.Context, arg ActivateUserPokemonParams) error {
	_, err := q.db.ExecContext(ctx, activateUserPokemon, arg.UserID, arg.PokemonID)
	return err
}

const countUserPokemon = `-- name: CountUserPokemon :one
SELECT COUNT(*) FROM user_pokemon WHERE user_id = $1
`

func (q *Queries) CountUserPokemon(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserPokemon, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deactivateAllUserPokemon = `-- name: DeactivateAllUserPokemon :exec
UPDATE user_pokemon
SET is_active = false
WHERE user_id = $1
`

func (q *Queries) DeactivateAllUserPokemon(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deactivateAllUserPokemon, userID)
	return err
}

const fetchPokemonDataById = `-- name: FetchPokemonDataById :one
SELECT id, name, type_1, type_2, hp, attack, defense, special_attack, special_defense, speed FROM pokedex WHERE id = $1
`

func (q *Queries) FetchPokemonDataById(ctx context.Context, id int32) (Pokedex, error) {
	row := q.db.QueryRowContext(ctx, fetchPokemonDataById, id)
	var i Pokedex
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type1,
		&i.Type2,
		&i.Hp,
		&i.Attack,
		&i.Defense,
		&i.SpecialAttack,
		&i.SpecialDefense,
		&i.Speed,
	)
	return i, err
}

const fetchPokemonDataByName = `-- name: FetchPokemonDataByName :one
SELECT id, name, type_1, type_2, hp, attack, defense, special_attack, special_defense, speed FROM pokedex WHERE LOWER(name) = LOWER($1)
`

func (q *Queries) FetchPokemonDataByName(ctx context.Context, lower string) (Pokedex, error) {
	row := q.db.QueryRowContext(ctx, fetchPokemonDataByName, lower)
	var i Pokedex
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type1,
		&i.Type2,
		&i.Hp,
		&i.Attack,
		&i.Defense,
		&i.SpecialAttack,
		&i.SpecialDefense,
		&i.Speed,
	)
	return i, err
}

const getMoveByID = `-- name: GetMoveByID :one
SELECT move_id, name, power, type, description FROM moves WHERE move_id = $1
`

func (q *Queries) GetMoveByID(ctx context.Context, moveID int32) (Move, error) {
	row := q.db.QueryRowContext(ctx, getMoveByID, moveID)
	var i Move
	err := row.Scan(
		&i.MoveID,
		&i.Name,
		&i.Power,
		&i.Type,
		&i.Description,
	)
	return i, err
}

const insertMove = `-- name: InsertMove :exec
INSERT INTO moves (move_id, name, power, type, description)
VALUES ($1, $2, $3, $4, $5)
`

type InsertMoveParams struct {
	MoveID      int32
	Name        string
	Power       int32
	Type        string
	Description sql.NullString
}

func (q *Queries) InsertMove(ctx context.Context, arg InsertMoveParams) error {
	_, err := q.db.ExecContext(ctx, insertMove,
		arg.MoveID,
		arg.Name,
		arg.Power,
		arg.Type,
		arg.Description,
	)
	return err
}

const insertPokedex = `-- name: InsertPokedex :exec
INSERT INTO pokedex (
    id, name, type_1, type_2, hp, attack, defense, special_attack, special_defense, speed
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
`

type InsertPokedexParams struct {
	ID             int32
	Name           string
	Type1          string
	Type2          sql.NullString
	Hp             int32
	Attack         int32
	Defense        int32
	SpecialAttack  int32
	SpecialDefense int32
	Speed          int32
}

func (q *Queries) InsertPokedex(ctx context.Context, arg InsertPokedexParams) error {
	_, err := q.db.ExecContext(ctx, insertPokedex,
		arg.ID,
		arg.Name,
		arg.Type1,
		arg.Type2,
		arg.Hp,
		arg.Attack,
		arg.Defense,
		arg.SpecialAttack,
		arg.SpecialDefense,
		arg.Speed,
	)
	return err
}

const insertPokemonMove = `-- name: InsertPokemonMove :exec
INSERT INTO pokemon_moves (pokemon_id, move_id)
VALUES ($1, $2)
`

type InsertPokemonMoveParams struct {
	PokemonID sql.NullInt32
	MoveID    sql.NullInt32
}

func (q *Queries) InsertPokemonMove(ctx context.Context, arg InsertPokemonMoveParams) error {
	_, err := q.db.ExecContext(ctx, insertPokemonMove, arg.PokemonID, arg.MoveID)
	return err
}

const insertUserPokemon = `-- name: InsertUserPokemon :exec
INSERT INTO user_pokemon (
    id,
    user_id,
    pokemon_id,
    nickname,
    current_hp,
    is_active,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, DEFAULT
)
`

type InsertUserPokemonParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	PokemonID sql.NullInt32
	Nickname  sql.NullString
	CurrentHp int32
	IsActive  bool
}

func (q *Queries) InsertUserPokemon(ctx context.Context, arg InsertUserPokemonParams) error {
	_, err := q.db.ExecContext(ctx, insertUserPokemon,
		arg.ID,
		arg.UserID,
		arg.PokemonID,
		arg.Nickname,
		arg.CurrentHp,
		arg.IsActive,
	)
	return err
}
