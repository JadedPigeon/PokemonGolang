// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pokemon.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const activateUserPokemon = `-- name: ActivateUserPokemon :one
UPDATE user_pokemon
SET is_active = TRUE
WHERE user_id = $1 AND id = $2
RETURNING id
`

type ActivateUserPokemonParams struct {
	UserID uuid.UUID
	ID     uuid.UUID
}

func (q *Queries) ActivateUserPokemon(ctx context.Context, arg ActivateUserPokemonParams) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, activateUserPokemon, arg.UserID, arg.ID)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const countUserPokemon = `-- name: CountUserPokemon :one
SELECT COUNT(*) FROM user_pokemon WHERE user_id = $1
`

func (q *Queries) CountUserPokemon(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUserPokemon, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const deactivateAllUserPokemon = `-- name: DeactivateAllUserPokemon :exec
UPDATE user_pokemon
SET is_active = false
WHERE user_id = $1
`

func (q *Queries) DeactivateAllUserPokemon(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deactivateAllUserPokemon, userID)
	return err
}

const deleteChallengePokemon = `-- name: DeleteChallengePokemon :exec
DELETE FROM challenger_pokemon
WHERE id = $1
`

func (q *Queries) DeleteChallengePokemon(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteChallengePokemon, id)
	return err
}

const fetchPokemonDataById = `-- name: FetchPokemonDataById :one
SELECT id, name, type_1, type_2, hp, attack, defense, special_attack, special_defense, speed, image_url FROM pokedex WHERE id = $1
`

func (q *Queries) FetchPokemonDataById(ctx context.Context, id int32) (Pokedex, error) {
	row := q.db.QueryRowContext(ctx, fetchPokemonDataById, id)
	var i Pokedex
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type1,
		&i.Type2,
		&i.Hp,
		&i.Attack,
		&i.Defense,
		&i.SpecialAttack,
		&i.SpecialDefense,
		&i.Speed,
		&i.ImageUrl,
	)
	return i, err
}

const fetchPokemonDataByName = `-- name: FetchPokemonDataByName :one
SELECT id, name, type_1, type_2, hp, attack, defense, special_attack, special_defense, speed, image_url FROM pokedex WHERE LOWER(name) = LOWER($1)
`

func (q *Queries) FetchPokemonDataByName(ctx context.Context, lower string) (Pokedex, error) {
	row := q.db.QueryRowContext(ctx, fetchPokemonDataByName, lower)
	var i Pokedex
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Type1,
		&i.Type2,
		&i.Hp,
		&i.Attack,
		&i.Defense,
		&i.SpecialAttack,
		&i.SpecialDefense,
		&i.Speed,
		&i.ImageUrl,
	)
	return i, err
}

const getActiveUserPokemon = `-- name: GetActiveUserPokemon :one
SELECT id, user_id, pokemon_id, nickname, current_hp, is_active, created_at
FROM user_pokemon
WHERE user_id = $1 AND is_active = True
`

func (q *Queries) GetActiveUserPokemon(ctx context.Context, userID uuid.UUID) (UserPokemon, error) {
	row := q.db.QueryRowContext(ctx, getActiveUserPokemon, userID)
	var i UserPokemon
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PokemonID,
		&i.Nickname,
		&i.CurrentHp,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getAllUserPokemon = `-- name: GetAllUserPokemon :many
SELECT p.id, p.name, p.type_1, p.type_2, p.hp, p.attack, p.defense, p.special_attack, p.special_defense, p.speed, p.image_url, up.is_active
FROM user_pokemon up
JOIN pokedex p ON up.pokemon_id = p.id
WHERE up.user_id = $1
`

type GetAllUserPokemonRow struct {
	ID             int32
	Name           string
	Type1          string
	Type2          sql.NullString
	Hp             int32
	Attack         int32
	Defense        int32
	SpecialAttack  int32
	SpecialDefense int32
	Speed          int32
	ImageUrl       sql.NullString
	IsActive       bool
}

func (q *Queries) GetAllUserPokemon(ctx context.Context, userID uuid.UUID) ([]GetAllUserPokemonRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserPokemon, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllUserPokemonRow
	for rows.Next() {
		var i GetAllUserPokemonRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Type1,
			&i.Type2,
			&i.Hp,
			&i.Attack,
			&i.Defense,
			&i.SpecialAttack,
			&i.SpecialDefense,
			&i.Speed,
			&i.ImageUrl,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getMoveByID = `-- name: GetMoveByID :one
SELECT move_id, name, power, type, description FROM moves WHERE move_id = $1
`

func (q *Queries) GetMoveByID(ctx context.Context, moveID int32) (Move, error) {
	row := q.db.QueryRowContext(ctx, getMoveByID, moveID)
	var i Move
	err := row.Scan(
		&i.MoveID,
		&i.Name,
		&i.Power,
		&i.Type,
		&i.Description,
	)
	return i, err
}

const getOneUserPokemon = `-- name: GetOneUserPokemon :one
SELECT id, user_id, pokemon_id, nickname, current_hp, is_active, created_at
FROM user_pokemon
WHERE user_id = $1 and pokemon_id = $2
`

type GetOneUserPokemonParams struct {
	UserID    uuid.UUID
	PokemonID sql.NullInt32
}

func (q *Queries) GetOneUserPokemon(ctx context.Context, arg GetOneUserPokemonParams) (UserPokemon, error) {
	row := q.db.QueryRowContext(ctx, getOneUserPokemon, arg.UserID, arg.PokemonID)
	var i UserPokemon
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PokemonID,
		&i.Nickname,
		&i.CurrentHp,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getPokemonMoves = `-- name: GetPokemonMoves :many
SELECT m.move_id, m.name, m.power, m.type, m.description
FROM pokemon_moves pm
JOIN moves m on pm.move_id = m.move_id
WHERE pm.pokemon_id = $1
`

func (q *Queries) GetPokemonMoves(ctx context.Context, pokemonID int32) ([]Move, error) {
	rows, err := q.db.QueryContext(ctx, getPokemonMoves, pokemonID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Move
	for rows.Next() {
		var i Move
		if err := rows.Scan(
			&i.MoveID,
			&i.Name,
			&i.Power,
			&i.Type,
			&i.Description,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserChallengePokemon = `-- name: GetUserChallengePokemon :one
SELECT cp.id, cp.pokemon_id, cp.current_hp, cp.created_at
FROM users u
JOIN challenger_pokemon cp ON u.challenge_pokemon_id = cp.id
WHERE u.id = $1
`

func (q *Queries) GetUserChallengePokemon(ctx context.Context, id uuid.UUID) (ChallengerPokemon, error) {
	row := q.db.QueryRowContext(ctx, getUserChallengePokemon, id)
	var i ChallengerPokemon
	err := row.Scan(
		&i.ID,
		&i.PokemonID,
		&i.CurrentHp,
		&i.CreatedAt,
	)
	return i, err
}

const insertChallengePokemon = `-- name: InsertChallengePokemon :exec
INSERT INTO challenger_pokemon (
    id,
    pokemon_id,
    current_hp,
    created_at
) VALUES (
    $1, $2, $3, DEFAULT
)
`

type InsertChallengePokemonParams struct {
	ID        uuid.UUID
	PokemonID sql.NullInt32
	CurrentHp int32
}

func (q *Queries) InsertChallengePokemon(ctx context.Context, arg InsertChallengePokemonParams) error {
	_, err := q.db.ExecContext(ctx, insertChallengePokemon, arg.ID, arg.PokemonID, arg.CurrentHp)
	return err
}

const insertMove = `-- name: InsertMove :exec
INSERT INTO moves (move_id, name, power, type, description)
VALUES ($1, $2, $3, $4, $5)
`

type InsertMoveParams struct {
	MoveID      int32
	Name        string
	Power       int32
	Type        string
	Description sql.NullString
}

func (q *Queries) InsertMove(ctx context.Context, arg InsertMoveParams) error {
	_, err := q.db.ExecContext(ctx, insertMove,
		arg.MoveID,
		arg.Name,
		arg.Power,
		arg.Type,
		arg.Description,
	)
	return err
}

const insertPokedex = `-- name: InsertPokedex :exec
INSERT INTO pokedex (
    id, name, type_1, type_2, hp, attack, defense, special_attack, special_defense, speed, image_url
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
`

type InsertPokedexParams struct {
	ID             int32
	Name           string
	Type1          string
	Type2          sql.NullString
	Hp             int32
	Attack         int32
	Defense        int32
	SpecialAttack  int32
	SpecialDefense int32
	Speed          int32
	ImageUrl       sql.NullString
}

func (q *Queries) InsertPokedex(ctx context.Context, arg InsertPokedexParams) error {
	_, err := q.db.ExecContext(ctx, insertPokedex,
		arg.ID,
		arg.Name,
		arg.Type1,
		arg.Type2,
		arg.Hp,
		arg.Attack,
		arg.Defense,
		arg.SpecialAttack,
		arg.SpecialDefense,
		arg.Speed,
		arg.ImageUrl,
	)
	return err
}

const insertPokemonMove = `-- name: InsertPokemonMove :exec
INSERT INTO pokemon_moves (pokemon_id, move_id)
VALUES ($1, $2)
ON CONFLICT (pokemon_id, move_id) DO NOTHING
`

type InsertPokemonMoveParams struct {
	PokemonID int32
	MoveID    int32
}

func (q *Queries) InsertPokemonMove(ctx context.Context, arg InsertPokemonMoveParams) error {
	_, err := q.db.ExecContext(ctx, insertPokemonMove, arg.PokemonID, arg.MoveID)
	return err
}

const insertUserPokemon = `-- name: InsertUserPokemon :exec
INSERT INTO user_pokemon (
    id,
    user_id,
    pokemon_id,
    nickname,
    current_hp,
    is_active,
    created_at
) VALUES (
    $1, $2, $3, $4, $5, $6, DEFAULT
)
`

type InsertUserPokemonParams struct {
	ID        uuid.UUID
	UserID    uuid.UUID
	PokemonID sql.NullInt32
	Nickname  sql.NullString
	CurrentHp int32
	IsActive  bool
}

func (q *Queries) InsertUserPokemon(ctx context.Context, arg InsertUserPokemonParams) error {
	_, err := q.db.ExecContext(ctx, insertUserPokemon,
		arg.ID,
		arg.UserID,
		arg.PokemonID,
		arg.Nickname,
		arg.CurrentHp,
		arg.IsActive,
	)
	return err
}

const setUserChallengePokemon = `-- name: SetUserChallengePokemon :exec
UPDATE users
SET challenge_pokemon_id = $1
WHERE id = $2
`

type SetUserChallengePokemonParams struct {
	ChallengePokemonID uuid.NullUUID
	ID                 uuid.UUID
}

func (q *Queries) SetUserChallengePokemon(ctx context.Context, arg SetUserChallengePokemonParams) error {
	_, err := q.db.ExecContext(ctx, setUserChallengePokemon, arg.ChallengePokemonID, arg.ID)
	return err
}
